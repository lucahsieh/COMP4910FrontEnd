{"version":3,"sources":["src/app/modules/employee/component/employee/employee.component.html","src/app/modules/employee/pages/employee-creation/employee-creation.component.html","src/app/modules/employee/pages/employee-edit/employee-edit.component.html","src/app/modules/employee/pages/employee-list/employee-list.component.html","src/app/modules/employee/pages/employee-view/employee-view.component.html","src/app/modules/employee/component/employee/employee.component.css","src/app/modules/employee/component/employee/employee.component.ts","src/app/modules/employee/employee-routing.module.ts","src/app/modules/employee/employee.module.ts","src/app/modules/employee/pages/employee-creation/employee-creation.component.css","src/app/modules/employee/pages/employee-creation/employee-creation.component.ts","src/app/modules/employee/pages/employee-edit/employee-edit.component.css","src/app/modules/employee/pages/employee-edit/employee-edit.component.ts","src/app/modules/employee/pages/employee-list/employee-list.component.css","src/app/modules/employee/pages/employee-list/employee-list.component.ts","src/app/modules/employee/pages/employee-view/employee-view.component.css","src/app/modules/employee/pages/employee-view/employee-view.component.ts","src/app/shared/model/Alert.ts","src/app/shared/model/Employee.ts","src/app/shared/model/LabourGrade.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"dropdown-divider  my-3\\\"></div>\\r\\n\\r\\n<h5 class=\\\"my-3\\\">Employee Information</h5>\\r\\n\\r\\n<div class=\\\"form-row\\\">\\r\\n    <div class=\\\"col-5\\\">\\r\\n        <!-- first name -->\\r\\n        <div class=\\\"input-group \\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\">First Name</span>\\r\\n            </div>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"employee.empFirstName\\\" [readOnly]=\\\"mode ==='read'\\\">\\r\\n\\r\\n        </div>\\r\\n        <span *ngIf=\\\"alerts.firstName\\\" class=\\\"error my-2\\\"><small>{{alerts.firstName.msg}}</small></span>\\r\\n\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\"></div>\\r\\n    <div class=\\\"col-5\\\">\\r\\n\\r\\n        <!-- last name -->\\r\\n        <div class=\\\"input-group \\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\">Last Name</span>\\r\\n            </div>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"employee.empLastName\\\" [readOnly]=\\\"mode ==='read'\\\">\\r\\n        </div>\\r\\n        <span *ngIf=\\\"alerts.lastName\\\" class=\\\"error my-2\\\"><small>{{alerts.lastName.msg}}</small></span>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\"></div>\\r\\n</div>\\r\\n<div class=\\\"  my-3\\\"></div>\\r\\n<div class=\\\"form-row\\\">\\r\\n    <div class=\\\"col-5\\\">\\r\\n\\r\\n        <!-- user name -->\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\">User Name</span>\\r\\n            </div>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"employee.empUsername\\\" (blur)=\\\"onExitUserName()\\\"\\r\\n                [readOnly]=\\\"mode ==='read' || mode=='update'\\\">\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\">\\r\\n        <div *ngIf=\\\"(mode ==='create' || mode ==='update')\\\">\\r\\n            <i *ngIf=\\\"validUsername\\\" class=\\\"material-icons pass my-2\\\">check_circle</i>\\r\\n            <i *ngIf=\\\"!validUsername\\\" class=\\\"material-icons error  my-2\\\">error</i>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-5\\\">\\r\\n        <!-- password -->\\r\\n        <div class=\\\"input-group\\\" *ngIf=\\\"mode==='create'\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\">Password</span>\\r\\n            </div>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"employee.empPassword\\\" [readOnly]=\\\"true\\\">\\r\\n        </div>\\r\\n        <button *ngIf=\\\"mode==='update'\\\" type=\\\"button\\\" class=\\\"btn btn-outline-secondary  m-1 px-3\\\"\\r\\n            (click)=\\\"onRestPw()\\\">Reset\\r\\n            Password</button>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\"></div>\\r\\n</div>\\r\\n<div class=\\\"  my-3\\\"></div>\\r\\n<div class=\\\"form-row\\\">\\r\\n    <div class=\\\"col-5\\\">\\r\\n        <!-- employe ID -->\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\">Employee ID</span>\\r\\n            </div>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"employee.empCode\\\" (blur)=\\\"onExitEmployeeId()\\\"\\r\\n                [readOnly]=\\\"mode ==='read' || mode=='update'\\\">\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\">\\r\\n        <div *ngIf=\\\"(mode ==='create' || mode ==='update')\\\">\\r\\n            <i *ngIf=\\\"validEmployeeCode\\\" class=\\\"material-icons pass my-2\\\">check_circle</i>\\r\\n            <i *ngIf=\\\"!validEmployeeCode\\\" class=\\\"material-icons error  my-2\\\">error</i>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-6\\\"></div>\\r\\n    <div class=\\\"col-1\\\"></div>\\r\\n</div>\\r\\n<div class=\\\"  my-3\\\"></div>\\r\\n<div class=\\\"form-row\\\">\\r\\n    <div class=\\\"col-5\\\">\\r\\n\\r\\n        <!-- labour grade -->\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\">Labour Grade</span>\\r\\n            </div>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{employee.labourGrade.labourGradeName}}\\\"\\r\\n                *ngIf=\\\"mode==='read'\\\" [readOnly]=\\\"true\\\">\\r\\n            <p-dropdown class=\\\"form-control\\\" [options]=\\\"greadeDropdown\\\" [(ngModel)]=\\\"selectedGrade\\\"\\r\\n                *ngIf=\\\"mode ==='create' || mode==='update'\\\"\\r\\n                placeholder=\\\"{{employee.labourGrade ? employee.labourGrade.labourGradeName : 'choose a Labour Grade'}}\\\"\\r\\n                optionLabel=\\\"label\\\" [style]=\\\"{'border-width':'0px','padding':'0px'}\\\"></p-dropdown>\\r\\n        </div>\\r\\n        <span *ngIf=\\\"alerts.labourGrade\\\" class=\\\"error my-2\\\"><small>{{alerts.labourGrade.msg}}</small></span>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\"></div>\\r\\n    <div class=\\\"col-5\\\">\\r\\n\\r\\n        <!-- supervisor -->\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\">Supervisor</span>\\r\\n            </div>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\"\\r\\n                value=\\\"{{employee.supervisor.empFirstName}} {{employee.supervisor.empLastName}}\\\" *ngIf=\\\"mode==='read'\\\"\\r\\n                [readOnly]=\\\"true\\\">\\r\\n            <p-dropdown class=\\\"form-control\\\" [options]=\\\"employeeDropdown\\\" [(ngModel)]=\\\"selectedSupervisor\\\"\\r\\n                *ngIf=\\\"mode ==='create' || mode==='update'\\\"\\r\\n                placeholder=\\\"{{employee.supervisor ? employee.supervisor.empFirstName + ' ' + employee.supervisor.empLastName : 'choose a supervisor'}}\\\"\\r\\n                optionLabel=\\\"label\\\" [style]=\\\"{'border-width':'0px','padding':'0px'}\\\"></p-dropdown>\\r\\n        </div>\\r\\n        <span *ngIf=\\\"alerts.supervisor\\\" class=\\\"error my-2\\\"><small>{{alerts.supervisor.msg}}</small></span>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\"></div>\\r\\n</div>\\r\\n<div class=\\\"  my-3\\\"></div>\\r\\n\\r\\n<div class=\\\"dropdown-divider  my-3\\\"></div>\\r\\n<h5 class=\\\"my-3\\\">Activation</h5>\\r\\n<div class=\\\"form-row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n\\r\\n        <!-- active/deactive -->\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <!-- <div class=\\\"input-group-prepend\\\">\\r\\n                        <span class=\\\"input-group-text\\\">Activation</span>\\r\\n                    </div> -->\\r\\n            <div class=\\\"btn-group btn-group-toggle\\\" data-toggle=\\\"buttons\\\">\\r\\n                <label\\r\\n                    [className]=\\\"employee.isActivated ? 'btn btn-outline-secondary active' : 'btn btn-outline-secondary'\\\">\\r\\n                    <input type=\\\"radio\\\" name=\\\"activation\\\" id=\\\"active\\\" [value]=true [(ngModel)]=\\\"employee.isActivated\\\"\\r\\n                        [disabled]=\\\"mode==='read'\\\">\\r\\n                    Active\\r\\n                </label>\\r\\n                <label\\r\\n                    [className]=\\\"employee.isActivated ? 'btn btn-outline-secondary' : 'btn btn-outline-secondary active'\\\">\\r\\n                    <!--  [className]=\\\"employee.isActivated ? 'btn btn-outline-secondary' : 'btn btn-outline-secondary active'\\\" -->\\r\\n                    <input type=\\\"radio\\\" name=\\\"activation\\\" id=\\\"deactive\\\" [value]=false [(ngModel)]=\\\"employee.isActivated\\\"\\r\\n                        [disabled]=\\\"mode==='read'\\\"> Deactive\\r\\n                </label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\" my-3\\\"></div>\\r\\n<div class=\\\"dropdown-divider  my-3\\\"></div>\\r\\n<h5 class=\\\"my-3\\\">Permissions</h5>\\r\\n<div class=\\\"form-row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n\\r\\n        <!-- permission -->\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <!-- <div class=\\\"input-group-prepend\\\">\\r\\n                        <span class=\\\"input-group-text\\\">Permissions</span>\\r\\n                    </div> -->\\r\\n            <div class=\\\"btn-group btn-group-toggle\\\" data-toggle=\\\"buttons\\\">\\r\\n                <label\\r\\n                    [className]=\\\"employee.isAdmin ? 'btn btn-outline-secondary active' : 'btn btn-outline-secondary'\\\">\\r\\n                    <input type=\\\"checkbox\\\" autocomplete=\\\"off\\\" [value]=\\\"!employee.isAdmin\\\" [disabled]=\\\"mode==='read'\\\"\\r\\n                        [(ngModel)]=\\\"employee.isAdmin\\\">\\r\\n                    Administrator Permission\\r\\n                </label>\\r\\n                <label\\r\\n                    [className]=\\\"employee.isProjectManager ? 'btn btn-outline-secondary active' : 'btn btn-outline-secondary'\\\">\\r\\n                    <input type=\\\"checkbox\\\" autocomplete=\\\"off\\\" [value]=\\\"!employee.isProjectManager\\\"\\r\\n                        [disabled]=\\\"mode==='read'\\\" [(ngModel)]=\\\"employee.isProjectManager\\\"> PM/EM?? Manager\\r\\n                    Permission\\r\\n                </label>\\r\\n                <label\\r\\n                    [className]=\\\"employee.isHumanResources ? 'btn btn-outline-secondary active' : 'btn btn-outline-secondary'\\\">\\r\\n                    <input type=\\\"checkbox\\\" autocomplete=\\\"off\\\" [value]=\\\"!employee.isHumanResources \\\"\\r\\n                        [disabled]=\\\"mode==='read'\\\" [(ngModel)]=\\\"employee.isHumanResources\\\"> Humane Resource Permission\\r\\n                </label>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","export default \"<div class=\\\"card mx-1\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <!-- Title -->\\r\\n        <h3 class=\\\"display-4\\\">Create Employee</h3>\\r\\n        <!-- alert -->\\r\\n        <shared-alertPromp [alerts]=\\\"alerts\\\"></shared-alertPromp>\\r\\n\\r\\n\\r\\n        <app-employee [employee]=\\\"employee\\\" [mode]=\\\"mode\\\" [validUsername]=\\\"validUsername\\\"\\r\\n            (changeEmpCode)=\\\"validateEmployeeCode()\\\" (changeUsername)=\\\"validateUserName()\\\"\\r\\n            [validEmployeeCode]=\\\"validEmployeeCode\\\" [alerts]=\\\"alerts\\\"></app-employee>\\r\\n\\r\\n        <!-- Action section-->\\r\\n        <div class=\\\"dropdown-divider my-3\\\"></div>\\r\\n        <div class=\\\"d-flex flex-row-reverse\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary  m-1 px-3\\\" (click)=\\\"onCreate($event)\\\">Create</button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary m-1 px-2\\\" (click)=\\\"onCancel($event)\\\">Cancel</button>\\r\\n        </div>\\r\\n        <div class=\\\"dropdown-divider my-3\\\"></div>\\r\\n    </div>\\r\\n\\r\\n\\r\\n</div>\"","export default \"<div class=\\\"card mx-1\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <!-- Title -->\\r\\n        <h3 class=\\\"display-4\\\">Employee Edit</h3>\\r\\n        <!-- alert -->\\r\\n        <shared-alertPromp [alerts]=\\\"alerts\\\"></shared-alertPromp>\\r\\n\\r\\n        <app-employee [employee]=\\\"employee\\\" [mode]=\\\"mode\\\" [alerts]=\\\"alerts\\\" *ngIf=\\\"employee\\\"\\r\\n            [validUsername]=\\\"validUsername\\\" [validEmployeeCode]=\\\"validEmployeeCode\\\" (restPw)=\\\"openModal(template)\\\">\\r\\n        </app-employee>\\r\\n\\r\\n\\r\\n        <!-- Action section-->\\r\\n        <div class=\\\"dropdown-divider my-3\\\"></div>\\r\\n        <div class=\\\"d-flex flex-row-reverse\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary  m-1 px-3\\\" (click)=\\\"onUpdate()\\\">Update</button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary m-1 px-2\\\" (click)=\\\"onCancel($event)\\\">Cancel</button>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- rest pw confirmation window -->\\r\\n<ng-template #template>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title pull-left\\\">Reset {{employee.empFirstName}}'s Password</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"modalRef.hide()\\\">\\r\\n            <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n        </button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        Are you sure reset the password of <strong> {{employee.empFirstName}} {{employee.empLastName}} </strong> to\\r\\n        default?\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary  m-1 px-3\\\" (click)=\\\"modalRef.hide()\\\">Cancel</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger  m-1 px-3\\\" (click)=\\\"resetPw()\\\">Reset</button>\\r\\n    </div>\\r\\n</ng-template>\"","export default \"<div class=\\\"card mx-1\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <h3 class=\\\"display-4\\\">Employee List</h3>\\r\\n        <div class=\\\"dropdown-divider \\\"></div>\\r\\n\\r\\n        <div class=\\\"d-flex flex-row-reverse\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary my-2\\\" routerLink=\\\"creation\\\">Create</button>\\r\\n        </div>\\r\\n\\r\\n        <p-table #dt [columns]=\\\"cols\\\" [value]=\\\"displayEmployee\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\">\\r\\n            <ng-template pTemplate=\\\"caption\\\">\\r\\n                <div style=\\\"text-align: right\\\">\\r\\n                    <i class=\\\"fa fa-search\\\" style=\\\"margin:4px 4px 0 0\\\"></i>\\r\\n                    <input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\"\\r\\n                        (input)=\\\"dt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\">\\r\\n                </div>\\r\\n            </ng-template>\\r\\n            <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n                <tr>\\r\\n                    <th *ngFor=\\\"let col of columns\\\">\\r\\n                        {{col.header}}\\r\\n                    </th>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\">\\r\\n                        <input *ngSwitchCase=\\\"'empCode'\\\" pInputText type=\\\"text\\\"\\r\\n                            (input)=\\\"dt.filter($event.target.value, col.field, 'contains')\\\">\\r\\n                        <input *ngSwitchCase=\\\"'empName'\\\" pInputText type=\\\"text\\\"\\r\\n                            (input)=\\\"dt.filter($event.target.value, col.field, 'contains')\\\">\\r\\n                        <input *ngSwitchCase=\\\"'empUsername'\\\" pInputText type=\\\"text\\\"\\r\\n                            (input)=\\\"dt.filter($event.target.value, col.field, 'contains')\\\">\\r\\n                        <input *ngSwitchCase=\\\"'supervisorName'\\\" pInputText type=\\\"text\\\"\\r\\n                            (input)=\\\"dt.filter($event.target.value, col.field, 'contains')\\\">\\r\\n                        <input *ngSwitchCase=\\\"'approverName'\\\" pInputText type=\\\"text\\\"\\r\\n                            (input)=\\\"dt.filter($event.target.value, col.field, 'contains')\\\">\\r\\n                    </th>\\r\\n                </tr>\\r\\n            </ng-template>\\r\\n            <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n                <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n                    <td *ngFor=\\\"let col of columns\\\">\\r\\n                        <span *ngIf=\\\"col.field !=='activation' && col.field !=='button'\\\">{{rowData[col.field]}}</span>\\r\\n                        <h5 *ngIf=\\\"col.field ==='activation'\\\">\\r\\n                            <span class=\\\"badge badge-success\\\" *ngIf=\\\"rowData[col.field]\\\">Activated</span>\\r\\n                            <span class=\\\"badge badge-danger\\\" *ngIf=\\\"!rowData[col.field]\\\">Deactivated</span>\\r\\n                        </h5>\\r\\n                        <div *ngIf=\\\"col.field ==='button'\\\">\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-link btn-sm\\\"\\r\\n                                [routerLink]=\\\"['view', rowData.employeeId]\\\">View</button>\\r\\n                            <button type=\\\"button\\\" class=\\\"btn btn-link btn-sm\\\"\\r\\n                                [routerLink]=\\\"['edit', rowData.employeeId]\\\">Edit</button>\\r\\n                        </div>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </ng-template>\\r\\n        </p-table>\\r\\n    </div>\\r\\n</div>\"","export default \"<div class=\\\"card mx-1\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <!-- Title -->\\r\\n        <h3 class=\\\"display-4\\\">Employee</h3>\\r\\n\\r\\n        <app-employee [employee]=\\\"employee\\\" [mode]=\\\"mode\\\" [alerts]=\\\"alerts\\\" *ngIf=\\\"employee\\\"></app-employee>\\r\\n\\r\\n        <!-- Action section-->\\r\\n        <div class=\\\"dropdown-divider my-3\\\"></div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n\\r\\n</div>\"","export default \".pass{\\r\\n    color:green;\\r\\n    font-style: normal;\\r\\n}\\r\\n.error{\\r\\n    color:red;\\r\\n    font-style: normal;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9lbXBsb3llZS9jb21wb25lbnQvZW1wbG95ZWUvZW1wbG95ZWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLFNBQVM7SUFDVCxrQkFBa0I7QUFDdEIiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL2VtcGxveWVlL2NvbXBvbmVudC9lbXBsb3llZS9lbXBsb3llZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhc3N7XHJcbiAgICBjb2xvcjpncmVlbjtcclxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxufVxyXG4uZXJyb3J7XHJcbiAgICBjb2xvcjpyZWQ7XHJcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XHJcbn0iXX0= */\"","import { Component, OnInit, TemplateRef, Input, Output, EventEmitter } from '@angular/core';\r\nimport { SelectItem } from 'primeng/api/selectitem';\r\nimport { Employee } from 'src/app/shared/model/Employee';\r\nimport { EmployeeService } from 'src/app/core/service/employee/employee.service';\r\nimport { MODE } from 'src/app/shared/model/MODE';\r\n\r\n@Component({\r\n  selector: 'app-employee',\r\n  templateUrl: './employee.component.html',\r\n  styleUrls: ['./employee.component.css']\r\n})\r\nexport class EmployeeComponent implements OnInit {\r\n\r\n  @Input() employee: Employee;\r\n  @Input() mode: MODE;\r\n  greadeDropdown: SelectItem[] = null;\r\n  employeeDropdown: SelectItem[] = null;\r\n  selectedGrade: SelectItem;\r\n  selectedSupervisor: SelectItem;\r\n  // userName validation\r\n  @Input() validUsername: boolean;\r\n  @Input() validEmployeeCode: boolean;\r\n  @Input() alerts;\r\n  @Output() restPw: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() changeUsername: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() changeEmpCode: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n\r\n  constructor(\r\n    private employeeService: EmployeeService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (this.mode !== MODE.Read) this.populateEmployeeDropdown();\r\n    if (this.mode !== MODE.Read) this.populateLabourGradeDropdown();\r\n\r\n  }\r\n  populateLabourGradeDropdown() {\r\n    this.employeeService\r\n      .getLabourGrades()\r\n      .subscribe(greades => {\r\n        this.greadeDropdown = [];\r\n        console.log(greades);\r\n        greades.forEach(g => {\r\n          console.log(g);\r\n          this.greadeDropdown.push(\r\n            { label: `${g.labourGradeName}`, value: g.labourGradeId }\r\n          );\r\n        })\r\n        console.log(this.greadeDropdown);\r\n      })\r\n  }\r\n\r\n  populateEmployeeDropdown() {\r\n    this.employeeService\r\n      .getEmployees()\r\n      .subscribe(employees => {\r\n        this.employeeDropdown = [];\r\n        console.log(employees);\r\n        employees.forEach(e => {\r\n          console.log(e);\r\n          this.employeeDropdown.push(\r\n            { label: `${e.empFirstName} ${e.empLastName}`, value: e.employeeId }\r\n          );\r\n        })\r\n        console.log(this.employeeDropdown);\r\n      })\r\n  }\r\n\r\n  // exit event of emp id field\r\n  onExitEmployeeId() {\r\n    this.changeEmpCode.emit('payload');\r\n  }\r\n\r\n  // exit event of user name\r\n  onExitUserName() {\r\n    this.changeUsername.emit('payload');\r\n  }\r\n\r\n  // click reset password btn\r\n  onRestPw() {\r\n    this.restPw.emit('payload');\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { EmployeeCreationComponent } from './pages/employee-creation/employee-creation.component';\r\nimport { EmployeeListComponent } from './pages/employee-list/employee-list.component';\r\nimport { EmployeeViewComponent } from './pages/employee-view/employee-view.component';\r\nimport { EmployeeEditComponent } from './pages/employee-edit/employee-edit.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: EmployeeListComponent, data: { breadcrumb: null } },\r\n  { path: 'view/:empId', component: EmployeeViewComponent, data: { breadcrumb: 'Employee View' } },\r\n  { path: 'edit/:empId', component: EmployeeEditComponent, data: { breadcrumb: 'Employee Edit' } },\r\n  { path: 'creation', component: EmployeeCreationComponent, data: { breadcrumb: 'Employee Creation' } }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class EmployeeRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { EmployeeRoutingModule } from './employee-routing.module';\r\nimport { EmployeeCreationComponent } from './pages/employee-creation/employee-creation.component';\r\n\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { AlertModule } from 'ngx-bootstrap';\r\nimport { EmployeeComponent } from './component/employee/employee.component';\r\nimport { EmployeeListComponent } from './pages/employee-list/employee-list.component';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { EmployeeViewComponent } from './pages/employee-view/employee-view.component';\r\nimport { EmployeeEditComponent } from './pages/employee-edit/employee-edit.component';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TableModule } from 'primeng/table';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    EmployeeComponent,\r\n    EmployeeCreationComponent,\r\n    EmployeeListComponent,\r\n    EmployeeViewComponent,\r\n    EmployeeEditComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    EmployeeRoutingModule,\r\n    FormsModule,\r\n    SharedModule,\r\n\r\n\r\n    //material\r\n    MatButtonToggleModule,\r\n\r\n    //primeng\r\n    DropdownModule,\r\n    TableModule,\r\n\r\n    // bootstrap\r\n    AlertModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    NgbModule,\r\n  ],\r\n\r\n})\r\nexport class EmployeeModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvZW1wbG95ZWUvcGFnZXMvZW1wbG95ZWUtY3JlYXRpb24vZW1wbG95ZWUtY3JlYXRpb24uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, TemplateRef, Pipe, PipeTransform } from '@angular/core';\r\nimport { SelectItem } from 'primeng/api/selectitem';\r\nimport { Employee } from 'src/app/shared/model/Employee';\r\nimport { EmployeeService } from 'src/app/core/service/employee/employee.service';\r\nimport { Alert } from 'src/app/shared/model/Alert';\r\nimport { MODE } from 'src/app/shared/model/MODE';\r\n\r\n@Component({\r\n  selector: 'app-employee-creation',\r\n  templateUrl: './employee-creation.component.html',\r\n  styleUrls: ['./employee-creation.component.css']\r\n})\r\nexport class EmployeeCreationComponent implements OnInit {\r\n\r\n  employee: Employee;\r\n  grade: SelectItem[] = null;\r\n  employeeDropdown: SelectItem[] = null;\r\n  selectedGrade: SelectItem;\r\n  selectedSupervisor: SelectItem;\r\n  // userName validation\r\n  validUsername: boolean = false;\r\n  validEmployeeCode: boolean = false;\r\n  alerts = {};\r\n  mode = MODE.Create;\r\n\r\n  constructor(\r\n    private employeeService: EmployeeService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.employee = new Employee();\r\n    this.employee.isActivated = true;\r\n    this.employee.empPassword = \"01234\";\r\n  }\r\n\r\n  // btn click event of creation\r\n  onCreate(e: any) {\r\n    if (!this.validatePage())\r\n      return;\r\n    console.log(\"POST employee\");\r\n    console.log(JSON.stringify(this.employee));\r\n    this.employeeService.postEmployee(this.employee).subscribe();\r\n  }\r\n\r\n  // btn click event of cancel\r\n  onCancel(e: any) { }\r\n\r\n  validatePage(): boolean {\r\n    var result = true;\r\n    if (!this.employee.empFirstName === null || this.employee.empFirstName.match(/^ *$/) !== null) {\r\n      this.alerts['firstName'] = new Alert('danger', 5000, `First Name cannot be empty`);\r\n      result = false;\r\n    }\r\n    if (!this.employee.empLastName === null || this.employee.empLastName.match(/^ *$/) !== null) {\r\n      this.alerts['lastName'] = new Alert('danger', 5000, `Last Name cannot be empty`);\r\n      result = false;\r\n    }\r\n    if (!this.validUsername) {\r\n      this.alerts['userName'] = new Alert('danger', 5000, `User Name: ${this.employee.empUsername} is not allowed`);\r\n      result = false;\r\n    }\r\n    if (!this.validEmployeeCode) {\r\n      this.alerts['employeeCode'] = new Alert('danger', 5000, `Employee ID : ${this.employee.empCode} is not allowed`);\r\n      result = false;\r\n    }\r\n    return result;\r\n  }\r\n  displayErrorMsg(fieldName: string) {\r\n    return (this.alerts[fieldName] != '') ? this.alerts[fieldName].msg : null;\r\n  }\r\n\r\n\r\n\r\n  // exit event of emp id field\r\n  validateEmployeeCode() {\r\n    this.employeeService.checkUserEmployeeCodeOK(this.employee.empCode)\r\n      .subscribe(response => {\r\n        console.log(response);\r\n        this.validEmployeeCode = response;\r\n      });\r\n  }\r\n\r\n  // exit event of user name\r\n  validateUserName() {\r\n    this.employeeService.checkUserNameOK(this.employee.empUsername)\r\n      .subscribe(response => {\r\n        console.log(response);\r\n        this.validUsername = response;\r\n      })\r\n\r\n  }\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvZW1wbG95ZWUvcGFnZXMvZW1wbG95ZWUtZWRpdC9lbXBsb3llZS1lZGl0LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, TemplateRef } from '@angular/core';\r\nimport { Employee } from 'src/app/shared/model/Employee';\r\nimport { MODE } from 'src/app/shared/model/MODE';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { EmployeeService } from 'src/app/core/service/employee/employee.service';\r\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { Alert } from 'src/app/shared/model/Alert';\r\n\r\n\r\n@Component({\r\n  selector: 'app-employee-edit',\r\n  templateUrl: './employee-edit.component.html',\r\n  styleUrls: ['./employee-edit.component.css']\r\n})\r\nexport class EmployeeEditComponent implements OnInit {\r\n\r\n  employee: Employee;\r\n  mode = MODE.Update;\r\n  alerts = {};\r\n  modalRef: BsModalRef;\r\n  validUsername: boolean = true;\r\n  validEmployeeCode: boolean = true;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private employeeService: EmployeeService,\r\n    private modalService: BsModalService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe(params => {\r\n      var id = params.get('empId');\r\n      this.employeeService.getEmployee(id).subscribe(e => this.employee = e);\r\n    });\r\n  }\r\n\r\n  openModal(template: TemplateRef<any>) {\r\n    console.log('opne')\r\n    console.log(template)\r\n    this.modalRef = this.modalService.show(template);\r\n  }\r\n  resetPw() {\r\n    this.employee.empPassword = '01234';\r\n  }\r\n  // btn click event of creation\r\n  onUpdate() {\r\n    if (!this.validatePage())\r\n      return;\r\n    console.log(\"POST employee\");\r\n    console.log(JSON.stringify(this.employee));\r\n    this.employeeService.postEmployee(this.employee).subscribe();\r\n  }\r\n\r\n  // btn click event of cancel\r\n  onCancel(e: any) { }\r\n\r\n  validatePage(): boolean {\r\n    var result = true;\r\n    if (!this.employee.empFirstName === null || this.employee.empFirstName.match(/^ *$/) !== null) {\r\n      this.alerts['firstName'] = new Alert('danger', 5000, `First Name cannot be empty`);\r\n      result = false;\r\n    }\r\n    if (!this.employee.empLastName === null || this.employee.empLastName.match(/^ *$/) !== null) {\r\n      this.alerts['lastName'] = new Alert('danger', 5000, `Last Name cannot be empty`);\r\n      result = false;\r\n    }\r\n    if (!this.validUsername) {\r\n      this.alerts['userName'] = new Alert('danger', 5000, `User Name: ${this.employee.empUsername} is not allowed`);\r\n      result = false;\r\n    }\r\n    if (!this.validEmployeeCode) {\r\n      this.alerts['employeeCode'] = new Alert('danger', 5000, `Employee ID : ${this.employee.empCode} is not allowed`);\r\n      result = false;\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvZW1wbG95ZWUvcGFnZXMvZW1wbG95ZWUtbGlzdC9lbXBsb3llZS1saXN0LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Employee } from 'src/app/shared/model/Employee';\r\nimport { EmployeeService } from 'src/app/core/service/employee/employee.service';\r\n\r\n@Component({\r\n  selector: 'app-employee-list',\r\n  templateUrl: './employee-list.component.html',\r\n  styleUrls: ['./employee-list.component.css']\r\n})\r\nexport class EmployeeListComponent implements OnInit {\r\n\r\n  displayEmployee: any[] = [];\r\n  cols: any[];\r\n\r\n  constructor(\r\n    private employeeService: EmployeeService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.initEmployees();\r\n    this.initCols();\r\n  }\r\n\r\n  initEmployees() {\r\n    this.employeeService.getEmployees().subscribe(res => {\r\n      console.log(res);\r\n      res.forEach(i => {\r\n        console.log(i)\r\n        this.displayEmployee.push(\r\n          {\r\n            \"employeeId\": i.employeeId,\r\n            \"empCode\": i.empCode,\r\n            \"empName\": `${i.empFirstName} ${i.empLastName}`,\r\n            \"empUsername\": i.empUsername,\r\n            'supervisorName': `${i.supervisor.empFirstName} ${i.supervisor.empLastName}`,\r\n            'approverName': `${i.timesheetApprover.empFirstName} ${i.timesheetApprover.empLastName}`,\r\n            'activation': i.isActivated,\r\n          }\r\n        );\r\n      })\r\n      console.log(this.displayEmployee)\r\n    });\r\n  }\r\n  initCols() {\r\n    this.cols = [\r\n      { field: 'empCode', header: 'Employee ID' },\r\n      { field: 'empName', header: 'Employee Name' },\r\n      { field: 'empUsername', header: 'User Name' },\r\n      { field: 'supervisorName', header: 'Supervisor' },\r\n      { field: 'approverName', header: 'Approver' },\r\n      { field: 'activation', header: 'Activation' },\r\n      { field: 'button', header: '' },\r\n    ]\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvZW1wbG95ZWUvcGFnZXMvZW1wbG95ZWUtdmlldy9lbXBsb3llZS12aWV3LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { EmployeeService } from 'src/app/core/service/employee/employee.service';\r\nimport { Employee } from 'src/app/shared/model/Employee';\r\nimport { MODE } from 'src/app/shared/model/MODE';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-employee-view',\r\n  templateUrl: './employee-view.component.html',\r\n  styleUrls: ['./employee-view.component.css']\r\n})\r\nexport class EmployeeViewComponent implements OnInit {\r\n\r\n\r\n  employee: Employee;\r\n  mode = MODE.Read;\r\n  alerts = {};\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private employeeService: EmployeeService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe(params => {\r\n      var id = params.get('empId');\r\n      this.employeeService.getEmployee(id).subscribe(e => this.employee = e);\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n","export class Alert {\r\n    constructor(type: string, time: number, msg: string) {\r\n        this.type = type;\r\n        this.timeout = time;\r\n        this.msg = msg;\r\n    }\r\n    type: string;\r\n    msg: string;\r\n    timeout: number;\r\n}","import { LabourGrade } from './LabourGrade';\r\n\r\nexport class Employee {\r\n    constructor() {\r\n        this.employeeId = null;\r\n        this.empUsername = \"\";\r\n        this.empPassword = \"\";\r\n        this.empCode = 1;\r\n        this.labourGrade = new LabourGrade();\r\n        this.empFirstName = \"\";\r\n        this.empLastName = \"\";\r\n        this.timesheetApproverId = 1;\r\n        this.supervisorId = 1;\r\n        this.isProjectManager = false;\r\n        this.isAdmin = false;\r\n        this.isHumanResources = false;\r\n        this.isActivated = true;\r\n        this.timesheetApprover = null;\r\n        this.supervisor = null;\r\n        this.jobTitleId = 1;\r\n    };\r\n    employeeId: number;\r\n    empUsername: string;\r\n    empPassword: string;\r\n    empCode: number;\r\n    jobTitleId: number;\r\n    labourGrade: LabourGrade;\r\n    empFirstName: string;\r\n    empLastName: string;\r\n    timesheetApproverId: number;\r\n    supervisorId: number;\r\n    isProjectManager: boolean;\r\n    isAdmin: boolean;\r\n    isHumanResources: boolean;\r\n    isActivated: boolean;\r\n    timesheetApprover: Employee;\r\n    supervisor: Employee;\r\n}\r\n","export class LabourGrade {\r\n    constructor() {\r\n        this.labourGradeId = 0;\r\n        this.labourGradeName = '';\r\n    }\r\n    labourGradeName: string;\r\n    labourGradeId: number;\r\n    hourlyWage: number;\r\n}\r\n"],"sourceRoot":"webpack:///","file":"modules-employee-employee-module-es5.js"}